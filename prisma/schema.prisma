// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../app/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String          @id @default(cuid())
  name          String?
  email         String          @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
 
model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@id([provider, providerAccountId])
}
 
model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
 
model VerificationToken {
  identifier String
  token      String
  expires    DateTime
 
  @@id([identifier, token])
}

model Client {
  id        String  @id @default(cuid())
  name      String
  email     String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  orders   Order[]
  payments Payment[]
  receipts Receipt[]
}

model Product {
  id          String  @id @default(cuid())
  name        String
  description String
  price       Float
  image       String
  stock       Int
  enabled     Boolean @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  categoryId  String
  category  Category @relation(fields: [categoryId], references: [id])
  items      OrderItem[]
}

model Order {
  id        String  @id @default(cuid())
  idClient  String
  client    Client @relation(fields: [idClient], references: [id])
  status    OrderStatus @default(PENDING)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  items    OrderItem[]
  total    Float
  tax      Float
  subtotal Float
  payment  Payment[]
  receipt  Receipt?
  
} 

model OrderItem {
  id        String  @id @default(cuid())
  idOrder   String
  order     Order @relation(fields: [idOrder], references: [id])
  idProduct String
  product   Product @relation(fields: [idProduct], references: [id])
  quantity  Int
  price     Float
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  receipt   Receipt? @relation(fields: [receiptId], references: [id])
  receiptId String?
}

model Receipt {
  id        String  @id @default(cuid())
  idOrder   String  @unique
  order     Order @relation(fields: [idOrder], references: [id])
  idClient  String
  client    Client @relation(fields: [idClient], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  item      OrderItem[]
  total    Float
  tax      Float
  subtotal Float
}

model Category {
  id          String  @id @default(cuid())
  name        String
  description String
  image       String
  enabled     Boolean @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  products    Product[]
}

model Payment {
  id        String  @id @default(cuid())
  type      PaymentType
  status    PaymentStatus @default(PENDING)
  amount   Float
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  idOrder   String
  order     Order @relation(fields: [idOrder], references: [id])
  idClient  String
  client    Client @relation(fields: [idClient], references: [id])
  data      DataPayment? 
}

model DataPayment {
  id       String  @id @default(cuid())
  response Json
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  idPayment String  @unique
  payment  Payment @relation(fields: [idPayment], references: [id])
}

enum OrderStatus {
  PENDING
  PAID
  CANCELED
}

enum PaymentType {
  CASH
  CREDIT_CARD
  DEBIT_CARD
  TRANSFER
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
  CANCELED
  REFUNDED
}